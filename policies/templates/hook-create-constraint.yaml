# The creation of the gatekeeper Constraints is implemented through an hook since they require
# that the corresponding ConstraintTemplate has already been deployed. Then, the gatekeeper operator
# generates the appropriate CRDs, and it is finally possible to apply the Constraints. Trying to deploy
# the Constraints earlier leads to a failure as the CRD is not yet available: thus, the corresponding
# type is unknown.
{{ $fullname := printf "%s-create-constraints-hook" ( include "policies.fullname" $ ) -}}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "policies.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "policies.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
- apiGroups:
  - "constraints.gatekeeper.sh"
  resources:
  {{- range .Values.policies }}
  - {{ lower .name | quote }}
  {{- end }}
  verbs:
  - get
  - create
  - patch
  - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "policies.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ $fullname }}
subjects:
  - kind: ServiceAccount
    name: {{ $fullname }}
    namespace: {{ .Release.Namespace }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "policies.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  {{- range .Values.policies }}
  {{- if not .resources }}
  {{ $errormsg := printf "You need to specify the resources the '%s' policy applies to" .name }}
  {{- fail $errormsg }}
  {{- else }}
  {{- $filename := printf "%s.yaml" (kebabcase .name) }}
  {{ $filename }}: |
    apiVersion: constraints.gatekeeper.sh/v1beta1
    kind: {{ .name }}
    metadata:
      name: {{ lower .name }}
      labels:
        {{- include "policies.labels" $ | nindent 8 }}
    spec:
      match:
        kinds:
          {{- toYaml .resources | nindent 10 }}
      {{- if .dryRun }}
      enforcementAction: dryrun
      {{- end}}
  {{- end}}
  {{- end}}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "policies.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ $fullname }}
      labels:
        {{- include "policies.labels" . | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $fullname }}
      containers:
      - name: kubectl
        image: {{ .Values.hook.kubectlImage }}
        command:
          - kubectl
        args:
          - apply
          - -f
          - /tmp/policies/
        securityContext:
          {{- toYaml .Values.hook.securityContext | nindent 12 }}
        resources:
          {{- toYaml .Values.hook.resources | nindent 12 }}
        volumeMounts:
          - name: policies
            mountPath: /tmp/policies/
      volumes:
        - name: policies
          configMap:
            name: {{ $fullname }}
